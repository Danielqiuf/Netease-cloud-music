/**
* @author Daniel·qiu
* @description 封装后常用的sass混合函数与处理函数
*/
/* 每个产品和小程序对应的oss文件目录名不同，使用image前需要先设置属于当前小程序和产品的目录,aliyun_oss_program_name和aliyun_oss_product_name */
/* 阿里云请求域名 */
$aliyun_oss_url: 'https://ttmini.yizhiwechat.com/' !default; 
/* 阿里云二级小程序文件名 */
$aliyun_oss_program_name: 'yzsingleTool' !default;
/* 阿里云三级+产品文件名 */
$aliyun_oss_product_name: '' !default;
/* 字体文件存放位置 */
$font-file-dir: '@/utils/font' !default;



%text-center {
  width: 750rpx;
  text-align: center;
}
%flex{
  display: flex;
}
%inlineflex{
  display: inline-flex;
}
%clear-both {
  clear: both;
  display: block;
}
%absolute-x-center{
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}
%absolute-y-center{
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}
%absolute-text-center{
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  top: 0;
  margin: auto;
}
%teleport {
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  width: 100%;
}



.flexbox{ display: flex; }
.flexbox-inline{ display: inline-flex; }
.nowrap{ flex-wrap: nowrap }
.wrap{ flex-wrap: wrap; }
.column{ flex-direction: column; }
.row{ flex-direction: row; }
.row-w-typeset{ flex-flow: row wrap; }
.row-nw-typeset{ flex-flow: row nowrap; }
.row-reverse{ flex-direction: row-reverse; }
.column-reverse{ flex-direction: row-reverse; }
.column-w-typeset{ flex-flow: column wrap; }
.column-nw-typeset{ flex-flow: column nowrap; }
.column-center{ place-content: center center; align-content: center; justify-content: center; }
.row-center{ align-items: center; justify-content: center; }
.items-center{ align-items: center;}
.items-end{ align-items: flex-end }
.items-baseline{ align-items: baseline; }
.items-start{ align-items: flex-start; }
.jusifty-start{ justify-content: flex-start; }
.jusifty-bet{ justify-content: space-between; }
.justify-ar{ justify-content: space-around; }
.jusify-end{ justify-content: flex-end; }
.justify-center{ justify-content: center;}
.content-start{ align-content: flex-start; }
.content-end{ align-content: end; }
.content-center{ align-content: center;}
.order1{ order: 1 }
.order2{ order: 2 }
.order3{ order: 3 }
.order4{ order: 4 }
.order5{ order: 5 }
.flex50p{ flex: 1 1 50%; }
.flexauto{ flex: 1 1 auto; }
.self-center{ align-self: center }
.self-start{ align-self: flex-start; }
.self-end{ align-self: flex-end; }

/**
* @description 乘阶运算
* @param {number} 乘数
* @return {number}
**/
@function factorial($num) {
  $result: $num;
  @if ($num < 0) {
    @return -1;
  } @else if ($num == 0 or $num == 1) {
    @return 1;
  } @else {
    @while ($num > 1) {
      $num: $num - 1;
      $result: $result * $num;
    }
    @return $result;
  }
}

/**
* @description 除法运算
* @param {number} $divisor 除数
* @param {number} $dividend 被除数
* @param (any) $suffix 返回单位 (rpx, px, rem, em, pt...)
* @return {number} 商
**/
@function div($divisor, $dividend) {
  @return ($divisor / $dividend);
}

/**
* @description 乘法运算
* @param {number} $factor 因数1
* @param {number} $factor2 因数2
* @param (any) $suffix 返回单位 (rpx, px, rem, em, pt...)
* @return {number} 积
**/
@function mutpy($factor, $factor2) {
  @return $factor * $factor2;
}

/**
* @description 合并map (a:b) (c:d) => (a:b,c:d)
* @param $maps map1, map2, map3... 以逗号分隔参数
* @return {map}
**/
@function merge($maps...) {
  $new_map: ();
  @each $m in $maps {
    $new_map: map-merge($new_map, $m);
  }
  @return $new_map;
}
/* ty(12px).transform */
@function ty($offset_y) {
  @return (transform: translateY($offset_y));
}
/* ... */
@function tx($offset_x) {
  @return (transform: translateX($offset_x));
}

@function t3d($offset...) {
  @return (transform: translate3d($offset));
}

@function visible($opacity_value) {
  @return (opacity: $opacity_value); 
}

@function width($width) {
  @return (width: $width);
}

@function height($height) {
  @return (height: $height);
}

@function black($alpha: 1) {
  @return rgba(0,0,0,$alpha);
}

@function white($alpha: 1) {
  @return rgba(255,255,255,$alpha);
}

@function transparent() {
  @return rgba(255,255,255, 0);
}

/**
* @description 背景图片
* @param {string} $image-name 图片名称
* @param {map} $properties-map 图片属性设置map
**/
@mixin image($image-name, $properties-map:()) {
  $suffix: if(map-has-key($properties-map, 'suffix'), map-get($properties-map, 'suffix'), 'png');
  $repeat: if(map-has-key($properties-map, 'repeat'), map-get($properties-map, 'repeat'), no-repeat);
  $position: if(map-has-key($properties-map, 'position'), map-get($properties-map, 'position'), 0 0);
  $size: if(map-has-key($properties-map, 'size'), map-get($properties-map, 'size'), cover);
  $color: if(map-has-key($properties-map, 'color'), map-get($properties-map, 'color'), transparent);
  $locale: if(map-has-key($properties-map, 'locale'), map-get($properties-map, 'locale'), '');
  
  $response-url: "#{$aliyun_oss_url}/#{$aliyun_oss_program_name}/#{$aliyun_oss_product_name}";
  @if ($locale != '') {
    $response-url: $locale;
  }

  background: {
    image: url(#{$response-url}/#{$image-name}.#{$suffix});
    repeat: $repeat;
    size: $size;
    position: $position;
    color:$color;
  }
}
/* flex默认居中布局 */
@mixin flex-center ($inline: false) {
  justify-content: center;
  align-items: center;

  @if $inline {
    @extend %inlineflex;
  }

  @else {
    @extend %flex;
  }
}
/* flex横向换行居中布局 */
@mixin flex-wrap-center ($inline: false) {
  justify-content: center;
  align-content: center;

  @if $inline {
    @extend %inlineflex;
  }

  @else {
    @extend %flex; 
  }
}
/* flex纵向布局 */
@mixin vertical {
  flex-direction: column;
  flex-wrap: wrap;
}

/**
* @description 统一规格字体大小与字体颜色和行高，字体行高默认和字体大小一样，若不一样需要单独在后面设置覆盖该属性
* @param {number} $size 字体大小
* @param {boolean} $bold 是否加粗
* @param {colors} $color 字体颜色
**/
@mixin adfont($size, $bold: false, $color: #FFFFFF) {
  font-size: $size;
  line-height: $size;
  color: $color;

  @if $bold {
    font-weight: bold;
  }
}

/**
* @description 细边框，比1px还要细
* @param {colors} $color 边框颜色
* @param {number} $radius 圆角半径,单位为rpx，传值不带单位
**/
@mixin sm-border ($color: #fff, $radius: 0) {
  &::before {
    content: "";
    width: 200%;
    height: 200%;
    position: absolute;
    left: 0;
    top: 0;
    transform-origin: 0 0;
    transform: scale(0.5);
    border: 1px solid #{$color};
    @if $radius {
      border-radius: mutpy($radius, 2);
    }
    @content;
  }
}

/**
* @description 媒体查询
* @param {number} $max-width 页面最大宽度
* @param {number} $min-width 页面最小宽度
* @param $mediatype 查询类型 (only-screen, screen, all, print, aural...) 
**/
@mixin media-max-width ($max-width, $min-width, $mediatype: screen) {
  @media #{$mediatype} and (max-width: $max-width) and (min-width: $min-width) {
    @content;
  }
}

/**
* @description 文本溢出处理,当$line > 1时文本呈现纵向排列，默认为横向排列
* @param {number} $line 溢出行数
**/
@mixin text-ellipsis ($line: 1) {
  @if $line == 1 {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  } @else {
    text-align: justify;
    word-break: break-all;
    text-overflow: ellipsis;
    display: -webkit-box;
    /*! autoprefixer: ignore next */
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
    overflow: hidden;
  }
}

/**
* @description 无限放大缩小按钮动画
* @param {number} $duration 持续时间
**/
@mixin btn-zoom ($duration: 0.6s) {
  $animation-properties-map:(
    duration: $duration,
    count: infinite,
    direction: alternate
  );
  @include animation(btn-zoom, $animation-properties-map);
}

@mixin animation ($animation-name, $animation-args: ()) {
  $duration: if(map-has-key($animation-args, 'duration'), map-get($animation-args, 'duration'), 0.3s);
  $timing-function: if(map-has-key($animation-args, 'timing'), map-get($animation-args, 'timing'), linear);
  $fill-mode: if(map-has-key($animation-args, 'mode'), map-get($animation-args, 'mode'), forwards);
  $iteration-count: if(map-has-key($animation-args, 'count'), map-get($animation-args, 'count'), 1);
  $direction: if(map-has-key($animation-args, 'direction'), map-get($animation-args, 'direction'), normal);
  $play-state: if(map-has-key($animation-args, 'state'), map-get($animation-args, 'state'), running);

  $animation-properties-map: (
    duration: $duration,
    timing-function: $timing-function,
    name: $animation-name,
    fill-mode: $fill-mode,
    iteration-count: $iteration-count,
    direction: $direction,
    play-state: $play-state
  );
  
  @each $vars,$value in $animation-properties-map {
    animation-#{$vars}: $value;
  }
}

/**
* @description keyframes动画流程,可以使用ty{transform:translateY} tx{transform:translateX} visible{opacity} width height函数来接收map对象，并合并的一个对象
* @param {string} $process-name 名称
* @param {list} $process-list 流程数组 (css-property:css-value, css-property2:css-value2) (...)
* @example 
*   // 使用map对象作为参数
*   @include process (animation-name, (transform: translateY(0), opacity: 0), (transform:translateY(100%),opacity:1));
*   // 以上代码会编译成：
*   @keyframes animation-name {0%{transform: translateY(0);opacity: 0} 100%{transform:translateY(100%);opacity:1}}
*   // 使用函数接收后合并作为map参数
*   $process1: merge(tx(0),visible(0));
*   $process2: merge(tx(100%),visible(1));
*   $process3: merge(tx(0)，visible(0), width(100%), (visibility:hidden));  // (visible:hidden)作为其它css属性传入合并
*   @include process (animation-name, $process1, $process2, $process3);
*   // 以上代码会编译成：
*   @keyframes animation-name { 0%{transform:translateX(0);opacity:0} 50%{transform:translateX(100%);opacity:1} 100%{transform:translateX(0);opacity:0;width:100%;visibility:hidden} }
**/
@mixin process ($process-name, $process-list) {
  $process-len:length($process-list);
  $per-time: ceil(div(100, $process-len));

  @keyframes #{$process-name} {
    @each $map-item in $process-list {
      $index: index($list: $process-list, $value: $map-item);
      $time-line: $index * $per-time;
      @if $index == 1 {
        $time-line: 0;
      } @else if $index >= $process-len {
        $time-line: 100;
      } 
      $percent: percentage(div($time-line, 100));
      #{$percent} {
        $map-keys: map-keys($map-item);
        $map-keys-len: length($map-keys);
        $while-index: 1; 
        @while ($while-index <= $map-keys-len) {  
          $property-key: nth($map-keys, $while-index);
          #{$property-key}: map-get($map-item,  $property-key);
          $while-index: $while-index + 1; 
        }
      }
    }  
  } 
}  

/**
* @description 加载字体,加载字体前需要设置$font-file-dir的地址
* @param {string} $font-name 字体文件名
* @param $font-style  字体默认风格
* @param $font-weight 字体粗细
**/
@mixin font ($font-name, $font-style: normal, $font-weight: normal) {
  @font-face {
    font-family: $font-name;
    src: url(#{$font-file-dir}/#{$font-name}.ttf) format('truetype'),
         url(#{$font-file-dir}/#{$font-name}.eot) format('embedded-opentype'),
         url(#{$font-file-dir}/#{$font-name}.woff) format('woff'),
         url(#{$font-file-dir}/#{$font-name}.svg##{$font-name}) format('svg');
    font-weight: $font-weight;
    font-style: $font-style;    
  }
}

@mixin pop-mask ($z-index: 100, $bg: black(.6)) {
  @extend %teleport;
  @extend .mask !optional;
  z-index: $z-index;
  background: $bg;
}

@mixin order($number){
  order: $number;
}
@mixin grow($number){ 
  flex-grow: $number;
}
@mixin shrink($number){
  flex-shrink: $number;
}
@mixin basis($number){
  flex-basis: $number;
}
@mixin Flex($val){
  flex: $val;
}
